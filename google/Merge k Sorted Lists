/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* a, ListNode* b){
        ListNode* dh = new ListNode(-1);
        ListNode* dt = dh;

        ListNode* ta = a;
        ListNode* tb = b;

        while(ta && tb){
            if(ta->val < tb->val){
                dt->next = ta;
                dt = dt->next;
                ta = ta->next;
            }else{
                dt->next = tb;
                dt = dt->next;
                tb = tb->next;
            }
        }

        while(ta){
            dt->next = ta;
            dt = dt->next;
            ta = ta->next;
        }

        while(tb){
            dt->next = tb;
            dt = dt->next;
            tb = tb->next;
        }

        return dh->next;
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return NULL;

        for(int i=lists.size()-1;i>0;i--){
            auto a = lists[i];
            auto b = lists[i-1];
            lists.pop_back();
            lists.pop_back();
            auto c = merge(a, b);
            lists.push_back(c);
        }

        return lists[0];
    }
};
